#version 400

in vec3 Position;
in vec3 Normal;
in vec3 Color;

struct LightInfo {
	vec3 position;
	vec3 intensity;
};
uniform LightInfo Light;

uniform vec3 Ka;
uniform vec3 Kd;
uniform vec3 Ks;
uniform float Shininess;
uniform vec3 eyePosition;

struct FogInfo {
	float minDist;
	float maxDist;
	vec3 color;
};
uniform FogInfo Fog;

layout(location=0) out vec4 fragColor;

void main()
{
	vec3 s = normalize(Light.position - Position);
	vec3 n = normalize(Normal);
	vec3 v = normalize(eyePosition - Position);
	vec3 h = normalize((s + v)/2);

	vec3 ambient = Light.intensity * Ka;
	vec3 diffuse = Light.intensity * Kd * pow(max(dot(s, n), 0.0), 30);
	vec3 specular = Light.intensity * Ks * pow(max(dot(h, n), 0.0), Shininess);
	vec3 shaderColor = Color + ambient + diffuse + specular;

	float fogFactor = (Fog.maxDist - length(eyePosition.xyz - Position.xyz))/(Fog.maxDist - Fog.minDist);
	fogFactor = clamp(fogFactor, 0.0, 1.0);

	vec3 theColor =  mix(Fog.color, shaderColor, fogFactor);
	fragColor = vec4(theColor, 1.0);
}